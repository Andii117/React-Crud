{"version":3,"sources":["component/App.js","reportWebVitals.js","index.js"],"names":["data","id","personaje","anime","App","state","form","modalInserta","modalEditar","handleChange","event","setState","target","name","value","mostrarModalInsertar","ocultarModalInsertar","insertarAnime","valor_nuevo","length","lista","push","mostrarModalEditar","ocultarModalEditar","editarAnime","contador","map","registro","Eliminar","window","confirm","splice","className","href","Container","Button","color","onClick","Table","this","Modal","isOpen","ModalHeader","ModalBody","FormGroup","type","readOnly","onChange","ModalFooter","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae5dd0e9.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Table , Button, Container, Modal , ModalHeader, ModalBody, FormGroup, ModalFooter} from 'reactstrap'\n\nconst data = [\n  {id : 1, personaje: \"Naruto\", anime:  \"Naruto\"},\n  {id : 2, personaje: \"Son Goku\", anime:  \"Drabon Ball Z\"},\n  {id : 3, personaje: \"Yugui Moto\", anime:  \"Yu-Gui-Oh!\"}\n]\n\nclass  App extends React.Component {\n\n  state={\n    data,\n    form:{\n      id:\"\",\n      personaje:\"\",\n      anime:\"\"\n    },\n    modalInserta:false,\n    modalEditar: false\n  }\n\n  handleChange = event =>{\n    this.setState({\n      form:{\n        ...this.state.form,\n        [event.target.name]: event.target.value\n      }\n    });\n  }\n\n  mostrarModalInsertar=()=>{\n    this.setState({\n      modalInserta: true\n    });\n  }\n\n  ocultarModalInsertar=()=>{\n    this.setState({\n      modalInserta: false\n    });\n  }\n\n  insertarAnime=()=>{\n    var valor_nuevo={...this.state.form};\n    valor_nuevo.id=this.state.data.length+1;\n    var lista=this.state.data;\n    lista.push(valor_nuevo);\n    this.setState({data: lista, modalInserta:false});\n  }\n \n  mostrarModalEditar = (anime) =>{\n    this.setState({\n      modalEditar: true,\n      form: anime\n    });\n  }\n\n  ocultarModalEditar = () =>{\n    this.setState({\n      modalEditar: false\n    });\n  }\n\n  editarAnime=(anime)=>{\n    let contador=0;\n    let lista=this.state.data;\n    lista.map((registro)=>{\n      if(anime.id==registro.id){\n        lista[contador].personaje=anime.personaje;\n        lista[contador].anime=anime.anime;\n      }\n      contador++;\n      this.setState({data:lista, modalEditar:false});\n    }\n    )\n  }\n\nEliminar=(anime)=>{\n  var opcion=window.confirm(\"Realmente desea elminar el anime\"+anime.anime);\n  if(opcion){\n    var contador=0;\n    var lista= this.state.data;\n    lista.map((registro)=>{\n      if(registro.id==anime.id){\n        lista.splice(contador, 1);\n      }\n    contador++;\n    this.setState({data: lista, modalEditar:false});\n    })\n  }\n}\n\n  render(){\n    return (\n      <div className=\"App\">\n        <nav className=\"nav\"><a href=\"#\">PÃ¡gina de Anime</a></nav>\n        <body className=\"App-body\">\n          <Container>\n            <Button color=\"dark\" onClick={()=>this.mostrarModalInsertar()}>Insertar nuevo personaje</Button>\n            <br/><br/><br/>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  <th>Personaje</th>\n                  <th>Anime</th>\n                  <th>Acciones</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.data.map(anime =>(\n                  <tr>\n                    <td>{anime.id}</td>\n                    <td>{anime.personaje}</td>\n                    <td>{anime.anime}</td>\n                    <td><Button color=\"primary\" onClick={()=>this.mostrarModalEditar(anime)}>Editar</Button>{\"  \"}\n                      <Button color=\"danger\" onClick={()=>this.Eliminar(anime)}>Eliminar</Button></td>\n                    \n                  </tr>\n                    )\n                  )\n                }\n              </tbody>\n            </Table>\n          </Container>\n\n          <Modal isOpen={this.state.modalInserta}>\n            <ModalHeader>\n              <div>\n                <h3>Insertar registro</h3>\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <FormGroup>\n                <label>id:</label>\n                <input className=\"form-control\" name=\"id\" type=\"text\" readOnly value={this.state.data.length+1}/>\n              </FormGroup>\n              <FormGroup>\n                <label>Personaje: </label>\n                <input className=\"form-control\" name=\"personaje\" type=\"text\" onChange={this.handleChange}></input>\n              </FormGroup>\n              <FormGroup>\n                <label>Anime: </label>\n                <input className=\"form-control\" name=\"anime\" type=\"text\" onChange={this.handleChange}></input>\n              </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={()=>{this.insertarAnime()}}>Insertar</Button>{\"  \"}\n              <Button color=\"danger\" onClick={()=>{this.ocultarModalInsertar()}}>Cancelar</Button>\n            </ModalFooter>\n          </Modal>\n\n          <Modal isOpen={this.state.modalEditar}>\n            <ModalHeader>\n              <div>\n                <h3>Editar registro</h3>\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <FormGroup>\n                <label>id:</label>\n                <input className=\"form-control\" name=\"id\" type=\"text\" readOnly value={this.state.form.id}/>\n              </FormGroup>\n              <FormGroup>\n                <label>Personaje: </label>\n                <input className=\"form-control\" name=\"personaje\" type=\"text\" value={this.state.form.personaje} onChange={this.handleChange}></input>\n              </FormGroup>\n              <FormGroup>\n                <label>Anime: </label>\n                <input className=\"form-control\" name=\"anime\" type=\"text\" value={this.state.form.anime} onChange={this.handleChange}></input>\n              </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={()=>{this.editarAnime(this.state.form)}}>Aceptar</Button>{\"  \"}\n              <Button color=\"danger\" onClick={()=>this.ocultarModalEditar()}>Cancelar</Button>\n            </ModalFooter>\n          </Modal>\n\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}